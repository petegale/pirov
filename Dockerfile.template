# base-image for node on any machine using a template variable,
# see more about dockerfile templates here: http://docs.resin.io/deployment/docker-templates/
# and about resin base images here: http://docs.resin.io/runtime/resin-base-images/
# Note the node:slim image doesn't have node-gyp
FROM resin/%%RESIN_MACHINE_NAME%%-node:slim

# use apt-get if you need to install dependencies,
# for instance if you need ALSA sound utils, just uncomment the lines below.

RUN apt-get update 
RUN apt-get install git cmake gcc g++ make kmod net-tools build-essential pkg-config
RUN apt-get install libsdl2-dev
RUN apt-get install -yq libjpeg8-dev python-dev python-numpy
RUN apt-get install libopencv-dev
RUN apt-get install libgphoto2-dev

# Defines our working directory in container
WORKDIR /usr/src/app

# Copies the package.json first for better cache on later pushes
COPY package.json package.json

# This install npm dependencies on the resin.io build server,
# making sure to clean up the artifacts it creates in order to reduce the image size.
RUN JOBS=MAX npm install --production --unsafe-perm && npm cache clean && rm -rf /tmp/*

# This will copy all files in our root to the working  directory in the container
COPY . ./

#Install mjpeg-streamer
#RUN /usr/src/app/gphoto.sh --stable

RUN cd /usr/src/app/lib/mjpg-streamer && make
RUN cd /usr/src/app/lib/mjpg-streamer && make install

#RUN export LD_LIBRARY_PATH=/usr/src/app/lib/streamer/plugins

# Enable systemd init system in container
ENV INITSYSTEM on

# server.js will run when container starts up on the device
CMD ["npm", "start"]
